import { Request, Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import db from "../../connection.js";
import { users } from "../../drizzle_essentials/schema.js";
import { eq } from "drizzle-orm";

const registerController = async (req: Request, res: Response) => {
  const { name, email, password } = req.body;

  // Check if the credentials are correct or not.
  if (!name.trim() || !email.trim() || !password.trim()) {
    res
      .status(400)
      .json({ status: "success", message: "Credentials cannot be empty!" });
    return;
  }

  // Checking if the user already exists or not - DB will not store data if user exists.
  const userIdArray: { id: number }[] = await db
    .select({ id: users.id })
    .from(users)
    .where(eq(users.email, email.toLowerCase()));
  if (userIdArray.length > 0) {
    res
      .status(400)
      .json({ status: "failure", message: "User Already Exists!" });
    return;
  }

  // Hashing Password before storing it in the Database.
  const hashedPassword: string = await bcrypt.hash(password as string, 10);

  // Storing the given data in MySQL Database.
  const result = await db
    .insert(users)
    .values({ name, email: email.toLowerCase(), password: hashedPassword });

  // Generating JWT Token using user's "id" (autogenerated by Drizzle).
  const JWT_SECRET: string | undefined = process.env.JWT_SECRET;
  if (!JWT_SECRET) {
    res.status(500).json({
      status: "failure",
      message: "JWT secret key not found in Environment Variables!",
    });
    return;
  }
  const token = jwt.sign({ id: result[0].insertId }, JWT_SECRET, {
    expiresIn: "7d",
  });
  res.cookie("trackkia_token", token, {
    maxAge: 7 * 24 * 60 * 60 * 1000,
    secure: process.env.NODE_ENV === "production",
    httpOnly: true,
    sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
  });

  // Fetching user's name that's to be send to Frontend.
  const [{ name: userName }]: { name: string }[] = await db
    .select({ name: users.name })
    .from(users)
    .where(eq(users.id, result[0].insertId));
  
  // Sending appropriate response to Frontend.
  res.status(200).json({
    status: "success",
    message: "User Registered Successfully!",
    userName, // This will be stored in Client Side Local Storage.
  });
};

export default registerController;
